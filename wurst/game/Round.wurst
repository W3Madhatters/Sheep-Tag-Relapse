package Round
import Leader
import Teams
import STPlayer
import Constants
import Utils
import TeamWeight
import ClosureForGroups
import PeriodicHandler
import Modes
import FarmHandler
import TimerWindow
import initlater DeathHandler
import initlater Game

enum State
    MODES
    STARTED
    COUNTDOWN
    SHEPHERDS_SPAWNED
    FINISHED    

public class Round
    use TimerWindow
    
    static real longestRoundTime = 0.0
    static string longestRoundString = ""
    static real shortestRoundTime = 9999999.0
    static string shortestRoundString = ""

    boolean updateStats = true

    PeriodicHandler periodic
    Multiboard gameBoard
    DeathHandler deathHandler
    FarmHandler farmHandler
    TeamWeight teamWeight

    State state = State.MODES

    ondestroy
        destroy periodic
        destroy gameBoard
        destroy deathHandler
        destroy farmHandler
        destroy teamWeight
        clean()

    function clean()
        cancelTimer()
        EnumItemsInRect(ENTIRE_MAP, null, () -> GetEnumItem().remove())
        Teams.sheepPlayers.addAll(Teams.spiritPlayers)
        Teams.spiritPlayers.clear()
        allPlayers.forEach() stp -> 
            forUnitsOfPlayer(stp.p) u -> 
                if (not u.isDummy())
                    u.remove()
            stp.kills = 0
            stp.deaths = 0
            stp.saves = 0
            stp.farmCount = 0
            stp.timeAsSheepCurrent = 0
            stp.shepherd = null
            stp.sheep = null
            stp.setIncome(0)
            stp.p.setGold(0)
            stp.p.setLumber(0)
            stp.p.panCameraToTimed(FENCE_CENTER, 1.0)

    function isCancelable() returns boolean
        return this.state != State.SHEPHERDS_SPAWNED

    function refreshLeader()
        gameBoard.fillMultiboard()

    function onStart()
        if (Teams.sheepPlayers.size() < 1)
            Game.cancelRound()
        else
            state = State.COUNTDOWN
            Game.refreshLeader()
            ClearTextMessages()
            clean()
            teamWeight.setTeamWeight()
            Teams.setAlliances()
            Teams.sheepPlayers.displayText(SPACE + "|cffffcc00You are |r|cffff0000Sheep|r|cffffcc00 this round.")
            Teams.shepherdPlayers.displayText(SPACE + "|cffffcc00You are |r|cffff0000Shepherd|r|cffffcc00 this round.")
            Teams.afkPlayers.displayText(SPACE + "|cffffcc00You are |r|cffff0000sitting out|r|cffffcc00 this round.")
            
            printTimed(SPACE + "|Cffffcc00Game starting in 3...|r", TEXT_DURATION)
            startTimer(1) ->
                printTimed(SPACE + "|Cffffcc00Game starting in 2...|r", TEXT_DURATION)
                FogEnable(not Modes.view)
                Teams.sheepPlayers.forEach(stp -> stp.p.panCameraTo(stp.getStartPosition()))
                Teams.shepherdPlayers.forEach(stp -> stp.p.panCameraTo(FENCE_CENTER))
                startTimer(1) ->
                    printTimed(SPACE + "|Cffffcc00Game starting in 1...|r", TEXT_DURATION)
                    startTimer(1) ->
                        onCountdownExpire()

    function onCountdownExpire()
        ClearTextMessages()
        state = State.STARTED
        periodic.start()
        Game.refreshLeader()
        Teams.sheepPlayers.forEach() stp -> 
            stp.p.setGold(Modes.sheepGold)
            stp.createSheep()
        Teams.shepherdPlayers.forEach() stp ->
            stp.p.setGold(Modes.shepherdGold)
            stp.createSTUnit(FENCE_CENTER, STUnitIds.HERO_SELECTOR)
        startTimerWithWindow(TeamWeight.spawnTime, "Shepherds Released") ->
            onShepherdRelease()

    function onShepherdRelease()
        state = State.SHEPHERDS_SPAWNED
        Game.refreshLeader()
        forUnitsOfType(STUnitIds.HERO_SELECTOR_NAME, (unit u) -> u.remove())
        Teams.shepherdPlayers.forEach() stp -> 
            if (not stp.shepherd.isAlive())
                stp.createShepherd()
            else
                stp.shepherd.show()
                stp.shepherd.setPos(FENCE_CENTER)
                stp.selectAndPan(stp.shepherd)
            stp.shepherd.setMana(25)
        if (updateStats)
            for stp1 in Teams.sheepPlayers
                for stp2 in Teams.sheepPlayers
                    playerCount.saveInt(stp1.index, stp2.index, 1 + playerCount.loadInt(stp1.index, stp2.index))
                stp1.sheepCount += 1
                stp1.sheepPlayed += 1
        startTimerWithWindow(Modes.time * 60, "Time Remaining", -> onTimerExpire())

    function endCondition()
        if (Teams.sheepPlayers.size() == 0)
            let time = getElapsedTime()
            ClearTextMessages()
            printTimed(GOLD + "The Sheep team survived for |r" + time.toTimeString(false), TEXT_DURATION)
            onEnd(time)
        if (Teams.shepherdPlayers.size() == 0)
            let time = getElapsedTime()
            ClearTextMessages()
            printTimed(GOLD + "All Shepherds have left the game", TEXT_DURATION)
            onEnd(time)

    function onTimerExpire()
        ClearTextMessages()
        printTimed(GOLD + "The Sheep team survived the entire round!", TEXT_DURATION)
        onEnd(Modes.time * 60.0)

    function updateLeader(real elapsedTime)
        for stp in Teams.sheepPlayers
            stp.timeAsSheep += elapsedTime
            if (stp.deaths == 0)
                stp.timeAsSheepFirst += elapsedTime
        if (elapsedTime > longestRoundTime)
            if longestRoundString != ""
                printTimed(GOLD + "A new leader has emerged!", TEXT_DURATION)
            longestRoundTime = elapsedTime
            longestRoundString = Teams.sheepPlayers.foldl("|cffffcc00" + elapsedTime.toTimeString(false) + " -|r", (stp, str) -> str + " " + stp.toString())
        if (elapsedTime < shortestRoundTime)
            if shortestRoundString != ""
                printTimed(GOLD + "A new loser has emerged!", TEXT_DURATION)
            shortestRoundTime = elapsedTime
            shortestRoundString = Teams.sheepPlayers.foldl("|cffffcc00" + elapsedTime.toTimeString(false) + " -|r", (stp, str) -> str + " " + stp.toString())

    function onEnd(real timeElapsed)
        for stp in allPlayers
            if (stp.status == AfkStatus.AFK_BENCHED or stp.status == AfkStatus.AFK_IN_GAME)
                if updateStats
                    stp.status = AfkStatus.AFK_BENCHED_INCREMENT
                else
                    stp.status = AfkStatus.AFK_BENCHED
                Teams.sheepPlayers.remove(stp)
                Teams.shepherdPlayers.remove(stp)
                Teams.spiritPlayers.remove(stp)
                Teams.afkPlayers.add(stp)
            if (stp.status == AfkStatus.ACTIVE_BENCHED and updateStats)
                stp.setSCToMax()
        if updateStats
            updateLeader(timeElapsed)
        state = State.FINISHED
        clean()
        Game.endRound()


public class SurviveRound extends Round
    construct()
        periodic = new PeriodicHandler()
        gameBoard = new SurviveBoard()
        deathHandler = new SurviveDeathHandler()
        farmHandler = new FarmHandler()
        teamWeight = new TeamWeight()
        updateStats = true
        clean()


public class SwitchRound extends Round
    override function updateLeader(real elapsedTime)
        STPlayer max = null
        STPlayer min = null
        for stp in allPlayers
            stp.timeAsSheep += stp.timeAsSheepCurrent
            if (stp.timeAsSheepCurrent > 0)
                if (max == null or stp.timeAsSheepCurrent > max.timeAsSheepCurrent)
                    max = stp
                if (min == null or stp.timeAsSheepCurrent < min.timeAsSheepCurrent)
                    min = stp
        if (max != null and max.timeAsSheepCurrent > longestRoundTime)
            if longestRoundString != ""
                printTimed(GOLD + "A new leader has emerged!", TEXT_DURATION)
            longestRoundTime = max.timeAsSheepCurrent
            longestRoundString = "|cffffcc00" + max.timeAsSheepCurrent.toTimeString(false) + " -|r" + max.toString()
        if (min != null and min.timeAsSheepCurrent < shortestRoundTime)
            if shortestRoundString != ""
                printTimed(GOLD + "A new loser has emerged!", TEXT_DURATION)
            shortestRoundTime = min.timeAsSheepCurrent
            shortestRoundString = "|cffffcc00" + min.timeAsSheepCurrent.toTimeString(false) + " -|r" + min.toString()

    override function onTimerExpire()
        ClearTextMessages()
        onEnd(Modes.time * 60.0)

    override function onCountdownExpire()
        Teams.shepherdPlayers.forEach() stp -> 
            stp.createSheep()
            stp.sheep.hide()
        super.onCountdownExpire()

    construct()
        periodic = new PeriodicHandler()
        gameBoard = new SwitchBoard()
        deathHandler = new SwitchDeathHandler()
        farmHandler = new FarmHandler()
        teamWeight = new SwitchTeamWeight()
        updateStats = not Modes.customSetup
        clean()

    override function isCancelable() returns boolean
        return true


public class VampireRound extends Round

    override function updateLeader(real elapsedTime)
        for stp in allPlayers
            stp.timeAsSheep += stp.timeAsSheepCurrent
            if (stp.deaths == 0)
                stp.timeAsSheepFirst += stp.timeAsSheepCurrent
        if (elapsedTime > longestRoundTime)
            if longestRoundString != ""
                printTimed(GOLD + "A new leader has emerged!", TEXT_DURATION)
            longestRoundTime = elapsedTime
            if (Teams.sheepPlayers.size() > 0)
                longestRoundString = Teams.sheepPlayers.foldl("|cffffcc00" + elapsedTime.toTimeString(false) + " -|r", (stp, str) -> str + " " + stp.toString())
            else
                let max = Teams.shepherdPlayers.peek()
                longestRoundString = "|cffffcc00" + elapsedTime.toTimeString(false) + " -|r" + max.toString()

    construct()
        periodic = new PeriodicHandler()
        gameBoard = new VampireBoard()
        deathHandler = new VampireDeathHandler()
        farmHandler = new FarmHandler()
        teamWeight = new VampireTeamWeight()
        updateStats = not Modes.customSetup
        clean()

    override function isCancelable() returns boolean
        return true
                    
